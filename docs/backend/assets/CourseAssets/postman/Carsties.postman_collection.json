{
	"info": {
		"_postman_id": "c019ebd5-bed6-49ea-a584-086e91bfe502",
		"name": "Carsties",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "2726016"
	},
	"item": [
		{
			"name": "Section 2",
			"item": [
				{
					"name": "Get all auctions",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Should be 10 items', function() {",
									"    pm.expect(jsonData.length).to.equal(10);",
									"})",
									"",
									"pm.test('First item should be Audi R8', function() {",
									"    pm.expect(jsonData[0].make).to.eq('Audi');",
									"    pm.expect(jsonData[0].model).to.eq('R8');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auctionApi}}/api/auctions",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Ferrari Spider",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Item is Ferrari Spider', function() {",
									"    pm.expect(jsonData.make).to.eq('Ferrari');",
									"    pm.expect(jsonData.model).to.eq('Spider');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auctionApi}}/api/auctions/dc1e4071-d19d-459b-b848-b5c3cd3d151f",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"dc1e4071-d19d-459b-b848-b5c3cd3d151f"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains expected properties\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('id');",
									"    pm.expect(jsonData).to.haveOwnProperty('make');",
									"    pm.expect(jsonData).to.haveOwnProperty('model');",
									"    pm.expect(jsonData).to.haveOwnProperty('year');",
									"    pm.expect(jsonData).to.haveOwnProperty('imageUrl');",
									"    pm.expect(jsonData).to.haveOwnProperty('seller');",
									"    pm.expect(jsonData.status).to.eq('Live');",
									"});",
									"",
									"pm.collectionVariables.set(\"createdItemId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date()",
									"date.setDate(date.getDate() + 14);",
									"var dateString = date.toISOString();",
									"pm.variables.set(\"dateString\", dateString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"Escort\",\n  \"color\": \"White\",\n  \"year\": \"2021\",\n  \"mileage\": \"10000\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": 100,\n  \"auctionEnd\": \"{{dateString}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make\": \"Ford Updated\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Make includes updated', function() {",
									"    pm.expect(jsonData.make).to.include('Updated');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Auction - Should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function() {",
									"    pm.response.to.have.status(404);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Section 3",
			"item": [
				{
					"name": "Get all items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('First item is Audi', function() {",
									"    pm.expect(jsonData.results[0].make).to.eq('Audi');",
									"})",
									"",
									"pm.test('Result includes results, pagecount and totalcount properties', function() {",
									"    pm.expect(jsonData).to.haveOwnProperty('results');",
									"    pm.expect(jsonData).to.haveOwnProperty('pageCount');",
									"    pm.expect(jsonData).to.haveOwnProperty('totalCount');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{searchApi}}/api/search",
							"host": [
								"{{searchApi}}"
							],
							"path": [
								"api",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars with make of Ford",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('First item is Ford', function() {",
									"    pm.expect(jsonData.results[0].make).to.eq('Ford');",
									"})",
									"",
									"pm.test('Result includes results, pagecount and totalcount properties', function() {",
									"    pm.expect(jsonData).to.haveOwnProperty('results');",
									"    pm.expect(jsonData).to.haveOwnProperty('pageCount');",
									"    pm.expect(jsonData).to.haveOwnProperty('totalCount');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{searchApi}}/api/search?searchTerm=ford",
							"host": [
								"{{searchApi}}"
							],
							"path": [
								"api",
								"search"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "ford"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all items With no params",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Result includes results, pagecount and totalcount properties', function() {",
									"    pm.expect(jsonData).to.haveOwnProperty('results');",
									"    pm.expect(jsonData).to.haveOwnProperty('pageCount');",
									"    pm.expect(jsonData).to.haveOwnProperty('totalCount');",
									"})",
									"",
									"pm.test('pagecount is 3 and totalCount is 9', function() {",
									"    pm.expect(jsonData.pageCount).to.eq(3);",
									"    pm.expect(jsonData.totalCount).to.eq(9);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{searchApi}}/api/search",
							"host": [
								"{{searchApi}}"
							],
							"path": [
								"api",
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all items With PageSize and PageNumber",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Result includes results, pagecount and totalcount properties', function() {",
									"    pm.expect(jsonData).to.haveOwnProperty('results');",
									"    pm.expect(jsonData).to.haveOwnProperty('pageCount');",
									"    pm.expect(jsonData).to.haveOwnProperty('totalCount');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{searchApi}}/api/search?pageNumber=2&pageSize=2",
							"host": [
								"{{searchApi}}"
							],
							"path": [
								"api",
								"search"
							],
							"query": [
								{
									"key": "pageNumber",
									"value": "2"
								},
								{
									"key": "pageSize",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all items With Bob as Seller",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Result includes results, pagecount and totalcount properties', function() {",
									"    pm.expect(jsonData).to.haveOwnProperty('results');",
									"    pm.expect(jsonData).to.haveOwnProperty('pageCount');",
									"    pm.expect(jsonData).to.haveOwnProperty('totalCount');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{searchApi}}/api/search?seller=bob",
							"host": [
								"{{searchApi}}"
							],
							"path": [
								"api",
								"search"
							],
							"query": [
								{
									"key": "seller",
									"value": "bob"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Section 4",
			"item": [
				{
					"name": "Checkpoint",
					"item": [
						{
							"name": "Create new Auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response body contains expected properties\", function () {",
											"    pm.expect(jsonData).to.haveOwnProperty('id');",
											"    pm.expect(jsonData).to.haveOwnProperty('make');",
											"    pm.expect(jsonData).to.haveOwnProperty('model');",
											"    pm.expect(jsonData).to.haveOwnProperty('year');",
											"    pm.expect(jsonData).to.haveOwnProperty('imageUrl');",
											"    pm.expect(jsonData).to.haveOwnProperty('seller');",
											"    pm.expect(jsonData.status).to.eq('Live');",
											"});",
											"",
											"pm.collectionVariables.set(\"createdItemId\", jsonData.id);",
											"pm.collectionVariables.set(\"createdItemMileage\", jsonData.mileage);",
											"pm.collectionVariables.set(\"createdItemModel\", jsonData.model);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date()",
											"date.setDate(date.getDate() + 14);",
											"var dateString = date.toISOString();",
											"pm.variables.set(\"dateString\", dateString);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"{{$randomFirstName}}\",\n  \"color\": \"{{$randomColor}}\",\n  \"year\": \"2020\",\n  \"mileage\": \"{{$randomInt}}\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": {{$randomInt}},\n  \"auctionEnd\": \"{{dateString}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{auctionApi}}/api/auctions",
									"host": [
										"{{auctionApi}}"
									],
									"path": [
										"api",
										"auctions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item created from search svc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Item has been created in search', function() {",
											"    var id = pm.collectionVariables.get('createdItemId');",
											"    pm.expect(jsonData.results[0].id).to.eq(id);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{searchApi}}/api/search?searchTerm={{createdItemModel}}",
									"host": [
										"{{searchApi}}"
									],
									"path": [
										"api",
										"search"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{createdItemModel}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the created auction Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"make\": \"Ford\",\n    \"model\": \"{{createdItemModel}}Updated\",\n    \"color\": \"red\",\n    \"mileage\": 20000,\n    \"year\": 1999\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
									"host": [
										"{{auctionApi}}"
									],
									"path": [
										"api",
										"auctions",
										"{{createdItemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item updated from search svc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Item has updated model', function() {",
											"    pm.expect(jsonData.results[0].model).to.contain('Updated');",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{searchApi}}/api/search?searchTerm={{createdItemModel}}Updated",
									"host": [
										"{{searchApi}}"
									],
									"path": [
										"api",
										"search"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{createdItemModel}}Updated"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
									"host": [
										"{{auctionApi}}"
									],
									"path": [
										"api",
										"auctions",
										"{{createdItemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item created - should return 0 results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Item has been removed from searhc', function() {",
											"    pm.expect(jsonData.totalCount).to.eq(0);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{searchApi}}/api/search?searchTerm={{createdItemModel}}",
									"host": [
										"{{searchApi}}"
									],
									"path": [
										"api",
										"search"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{createdItemModel}}"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Create new Auction",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains expected properties\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('id');",
									"    pm.expect(jsonData).to.haveOwnProperty('make');",
									"    pm.expect(jsonData).to.haveOwnProperty('model');",
									"    pm.expect(jsonData).to.haveOwnProperty('year');",
									"    pm.expect(jsonData).to.haveOwnProperty('imageUrl');",
									"    pm.expect(jsonData).to.haveOwnProperty('seller');",
									"    pm.expect(jsonData.status).to.eq('Live');",
									"});",
									"",
									"pm.collectionVariables.set(\"createdItemId\", jsonData.id);",
									"pm.collectionVariables.set(\"createdItemMileage\", jsonData.mileage);",
									"pm.collectionVariables.set(\"createdItemModel\", jsonData.model);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date()",
									"date.setDate(date.getDate() + 14);",
									"var dateString = date.toISOString();",
									"pm.variables.set(\"dateString\", dateString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"{{$guid}}\",\n  \"color\": \"{{$randomColor}}\",\n  \"year\": \"2020\",\n  \"mileage\": \"{{$randomInt}}\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": {{$randomInt}},\n  \"auctionEnd\": \"{{dateString}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item with createdItemModel",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"var model = pm.collectionVariables.get(\"createdItemModel\");",
									"var mileage = pm.collectionVariables.get(\"createdItemMileage\");",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Item has correct make and model', function() {",
									"    pm.expect(jsonData.results[0].model).to.eq(model);",
									"    pm.expect(jsonData.results[0].mileage).to.eq(mileage);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{searchApi}}/api/search?searchTerm={{createdItemModel}}",
							"host": [
								"{{searchApi}}"
							],
							"path": [
								"api",
								"search"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "{{createdItemModel}}"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Section 5",
			"item": [
				{
					"name": "GetBobToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"BobToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "bob",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identitySvc}}/connect/token",
							"host": [
								"{{identitySvc}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTomToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"TomToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "tom",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identitySvc}}/connect/token",
							"host": [
								"{{identitySvc}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAliceToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"AliceToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "alice",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identitySvc}}/connect/token",
							"host": [
								"{{identitySvc}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get User Info",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BobToken}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"url": {
							"raw": "http://localhost:5000/connect/userinfo",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"connect",
								"userinfo"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Auction no auth",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date()",
									"date.setDate(date.getDate() + 14);",
									"var dateString = date.toISOString();",
									"pm.variables.set(\"dateString\", dateString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"Escort\",\n  \"color\": \"White\",\n  \"year\": \"2021\",\n  \"mileage\": \"10000\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": 100,\n  \"auctionEnd\": \"{{dateString}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Auction as Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains Alice as seller\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('seller');",
									"    pm.expect(jsonData.seller).to.eq('alice');",
									"});",
									"",
									"pm.collectionVariables.set(\"createdItemId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date()",
									"date.setDate(date.getDate() + 14);",
									"var dateString = date.toISOString();",
									"pm.variables.set(\"dateString\", dateString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"Escort\",\n  \"color\": \"White\",\n  \"year\": \"2021\",\n  \"mileage\": \"10000\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": 100,\n  \"auctionEnd\": \"{{dateString}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created auction as Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function() {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BobToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make\": \"Ford Updated\",\n    \"model\": \"Updated\",\n    \"color\": \"red\",\n    \"mileage\": 20000,\n    \"year\": 1999\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created auction as Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make\": \"Ford Updated\",\n    \"model\": \"Updated\",\n    \"color\": \"red\",\n    \"mileage\": 20000,\n    \"year\": 1999\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Auction as Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{auctionApi}}/api/auctions/{{createdItemId}}",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Section 6",
			"item": [
				{
					"name": "GetBobToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"BobToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "bob",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identitySvc}}/connect/token",
							"host": [
								"{{identitySvc}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAliceToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"AliceToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "alice",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identitySvc}}/connect/token",
							"host": [
								"{{identitySvc}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all items",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Result includes results, pagecount and totalcount properties', function() {",
									"    pm.expect(jsonData).to.haveOwnProperty('results');",
									"    pm.expect(jsonData).to.haveOwnProperty('pageCount');",
									"    pm.expect(jsonData).to.haveOwnProperty('totalCount');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/search",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"search"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all cars with make of Ford",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('First item is Ford', function() {",
									"    pm.expect(jsonData.results[0].make).to.eq('Ford');",
									"})",
									"",
									"pm.test('Result includes results, pagecount and totalcount properties', function() {",
									"    pm.expect(jsonData).to.haveOwnProperty('results');",
									"    pm.expect(jsonData).to.haveOwnProperty('pageCount');",
									"    pm.expect(jsonData).to.haveOwnProperty('totalCount');",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/search?searchTerm=ford",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "searchTerm",
									"value": "ford"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Auction as Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains Alice as seller\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('seller');",
									"    pm.expect(jsonData.seller).to.eq('alice');",
									"});",
									"",
									"pm.collectionVariables.set(\"createdItemId\", jsonData.id);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date()",
									"date.setDate(date.getDate() + 14);",
									"var dateString = date.toISOString();",
									"pm.variables.set(\"dateString\", dateString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"Escort\",\n  \"color\": \"White\",\n  \"year\": \"2021\",\n  \"mileage\": \"10000\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": 100,\n  \"auctionEnd\": \"{{dateString}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway}}/auctions",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Item by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Item has correct make and model', function() {",
									"    pm.expect(jsonData.make).to.eq('Ford');",
									"    pm.expect(jsonData.model).to.eq('Escort');",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/auctions/{{createdItemId}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created auction as Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 403', function() {",
									"    pm.response.to.have.status(403);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BobToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make\": \"Ford Updated\",\n    \"model\": \"Updated\",\n    \"color\": \"red\",\n    \"mileage\": 20000,\n    \"year\": 1999\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway}}/auctions/{{createdItemId}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update the created auction as Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"make\": \"Ford Updated\",\n    \"model\": \"Updated\",\n    \"color\": \"red\",\n    \"mileage\": 20000,\n    \"year\": 1999\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway}}/auctions/{{createdItemId}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Updated Item by Id",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})",
									"",
									"pm.test('Item has correct make and model', function() {",
									"    pm.expect(jsonData.make).to.eq('Ford Updated');",
									"    pm.expect(jsonData.model).to.eq('Updated');",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/auctions/{{createdItemId}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Auction as Alice",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 200', function() {",
									"    pm.response.to.have.status(200);",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{gateway}}/auctions/{{createdItemId}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Deleted Item return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('Status code is 404', function() {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"setTimeout(function(){}, 1000);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/auctions/{{createdItemId}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Section 7",
			"item": [
				{
					"name": "Checkpoint",
					"item": [
						{
							"name": "GetBobToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"BobToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "bob",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Pass123$",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "postman",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "NotASecret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "auctionApp openid profile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{identitySvc}}/connect/token",
									"host": [
										"{{identitySvc}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response body contains expected properties\", function () {",
											"    pm.expect(jsonData).to.haveOwnProperty('id');",
											"    pm.expect(jsonData).to.haveOwnProperty('make');",
											"    pm.expect(jsonData).to.haveOwnProperty('model');",
											"    pm.expect(jsonData).to.haveOwnProperty('year');",
											"    pm.expect(jsonData).to.haveOwnProperty('imageUrl');",
											"    pm.expect(jsonData).to.haveOwnProperty('seller');",
											"    pm.expect(jsonData.status).to.eq('Live');",
											"});",
											"",
											"pm.test(\"Response body contains Bob as seller\", function () {",
											"    pm.expect(jsonData).to.haveOwnProperty('seller');",
											"    pm.expect(jsonData.seller).to.eq('bob');",
											"});",
											"",
											"pm.collectionVariables.set(\"createdItemId\", jsonData.id);",
											"pm.collectionVariables.set(\"createdItemMileage\", jsonData.mileage);",
											"pm.collectionVariables.set(\"createdItemModel\", jsonData.model);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date()",
											"date.setDate(date.getDate() + 14);",
											"var dateString = date.toISOString();",
											"pm.variables.set(\"dateString\", dateString);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BobToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"{{$randomFirstName}}\",\n  \"color\": \"{{$randomColor}}\",\n  \"year\": \"2020\",\n  \"mileage\": \"{{$randomInt}}\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": {{$randomInt}},\n  \"auctionEnd\": \"{{dateString}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway}}/auctions",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"auctions"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item created from search svc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Item has been created in search', function() {",
											"    var id = pm.collectionVariables.get('createdItemId');",
											"    pm.expect(jsonData.results[0].id).to.eq(id);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway}}/search?searchTerm={{createdItemModel}}",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{createdItemModel}}"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Update the created auction Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BobToken}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"make\": \"Ford\",\n    \"model\": \"{{createdItemModel}}Updated\",\n    \"color\": \"red\",\n    \"mileage\": 20000,\n    \"year\": 1999\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway}}/auctions/{{createdItemId}}",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"auctions",
										"{{createdItemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item updated from search svc",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Item has updated model', function() {",
											"    pm.expect(jsonData.results[0].model).to.contain('Updated');",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway}}/search?searchTerm={{createdItemModel}}Updated",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{createdItemModel}}Updated"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete Auction",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BobToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{gateway}}/auctions/{{createdItemId}}",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"auctions",
										"{{createdItemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Item created - should return 0 results",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test('Status code is 200', function() {",
											"    pm.response.to.have.status(200);",
											"})",
											"",
											"pm.test('Item has been removed from searhc', function() {",
											"    pm.expect(jsonData.totalCount).to.eq(0);",
											"})"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"setTimeout(function(){}, 1000);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway}}/search?searchTerm={{createdItemModel}}",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"search"
									],
									"query": [
										{
											"key": "searchTerm",
											"value": "{{createdItemModel}}"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Section 11",
			"item": [
				{
					"name": "Checkpoint",
					"item": [
						{
							"name": "GetBobToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"BobToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "bob",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Pass123$",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "postman",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "NotASecret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "auctionApp openid profile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{identitySvc}}/connect/token",
									"host": [
										"{{identitySvc}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create new Auction as Bob",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"",
											"pm.test(\"Response body contains Alice as seller\", function () {",
											"    pm.expect(jsonData).to.haveOwnProperty('seller');",
											"    pm.expect(jsonData.seller).to.eq('bob');",
											"});",
											"",
											"pm.collectionVariables.set(\"createdItemId\", jsonData.id);"
										],
										"type": "text/javascript"
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"var date = new Date()",
											"date.setDate(date.getDate() + 14);",
											"var dateString = date.toISOString();",
											"pm.variables.set(\"dateString\", dateString);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BobToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"Escort\",\n  \"color\": \"White\",\n  \"year\": \"2021\",\n  \"mileage\": \"10000\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": 1111,\n  \"auctionEnd\": \"{{dateString}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{gateway}}/auctions",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"auctions"
									]
								}
							},
							"response": []
						},
						{
							"name": "GetAliceToken",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var response = pm.response.json();",
											"",
											"pm.collectionVariables.set(\"AliceToken\", response.access_token);"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										},
										{
											"key": "username",
											"value": "alice",
											"type": "text"
										},
										{
											"key": "password",
											"value": "Pass123$",
											"type": "text"
										},
										{
											"key": "client_id",
											"value": "postman",
											"type": "text"
										},
										{
											"key": "client_secret",
											"value": "NotASecret",
											"type": "text"
										},
										{
											"key": "scope",
											"value": "auctionApp openid profile",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{identitySvc}}/connect/token",
									"host": [
										"{{identitySvc}}"
									],
									"path": [
										"connect",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Bid As Alice for 100",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{AliceToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gateway}}/bids?auctionId={{createdItemId}}&amount=100",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"bids"
									],
									"query": [
										{
											"key": "auctionId",
											"value": "{{createdItemId}}"
										},
										{
											"key": "amount",
											"value": "100"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get bids for auction",
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{gateway}}/bids/{{createdItemId}}",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"bids",
										"{{createdItemId}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Bid on Ford Mustang Auction (test grpc)",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{BobToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{gateway}}/bids?auctionId=bbab4d5a-8565-48b1-9450-5ac2a5c4a654&amount=100",
									"host": [
										"{{gateway}}"
									],
									"path": [
										"bids"
									],
									"query": [
										{
											"key": "auctionId",
											"value": "bbab4d5a-8565-48b1-9450-5ac2a5c4a654"
										},
										{
											"key": "amount",
											"value": "100"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "GetBobToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"BobToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "bob",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identitySvc}}/connect/token",
							"host": [
								"{{identitySvc}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create new Auction as Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains Alice as seller\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('seller');",
									"    pm.expect(jsonData.seller).to.eq('bob');",
									"});",
									"",
									"pm.collectionVariables.set(\"createdItemId\", jsonData.id);",
									"pm.collectionVariables.set(\"createdItemMileage\", jsonData.mileage);",
									"pm.collectionVariables.set(\"createdItemModel\", jsonData.model);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date()",
									"date.setDate(date.getDate() + 14);",
									"var dateString = date.toISOString();",
									"pm.variables.set(\"dateString\", dateString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BobToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"{{$randomFirstName}}\",\n  \"color\": \"White\",\n  \"year\": \"2021\",\n  \"mileage\": \"10000\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": 1111,\n  \"auctionEnd\": \"{{dateString}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{auctionApi}}/api/auctions",
							"host": [
								"{{auctionApi}}"
							],
							"path": [
								"api",
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetTomToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"TomToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "tom",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:5000/connect/token",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "5000",
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GetAliceToken",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"AliceToken\", response.access_token);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "grant_type",
									"value": "password",
									"type": "text"
								},
								{
									"key": "username",
									"value": "alice",
									"type": "text"
								},
								{
									"key": "password",
									"value": "Pass123$",
									"type": "text"
								},
								{
									"key": "client_id",
									"value": "postman",
									"type": "text"
								},
								{
									"key": "client_secret",
									"value": "NotASecret",
									"type": "text"
								},
								{
									"key": "scope",
									"value": "auctionApp openid profile",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{identitySvc}}/connect/token",
							"host": [
								"{{identitySvc}}"
							],
							"path": [
								"connect",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bid As Alice for 100",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{bidSvc}}/api/bids?auctionId={{createdItemId}}&amount=100",
							"host": [
								"{{bidSvc}}"
							],
							"path": [
								"api",
								"bids"
							],
							"query": [
								{
									"key": "auctionId",
									"value": "{{createdItemId}}"
								},
								{
									"key": "amount",
									"value": "100"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bid As Tom for 200",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TomToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{bidSvc}}/api/bids?auctionId={{createdItemId}}&amount=200",
							"host": [
								"{{bidSvc}}"
							],
							"path": [
								"api",
								"bids"
							],
							"query": [
								{
									"key": "auctionId",
									"value": "{{createdItemId}}"
								},
								{
									"key": "amount",
									"value": "200"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get bids for auction",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{bidSvc}}/api/bids/{{createdItemId}}",
							"host": [
								"{{bidSvc}}"
							],
							"path": [
								"api",
								"bids",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Created Auction details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/auctions/{{createdItemId}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions",
								"{{createdItemId}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Created Auction search",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/search?pageSize=100&searchTerm={{createdItemModel}}",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "100"
								},
								{
									"key": "searchTerm",
									"value": "{{createdItemModel}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create 10 second Auction as Bob",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Response body contains Alice as seller\", function () {",
									"    pm.expect(jsonData).to.haveOwnProperty('seller');",
									"    pm.expect(jsonData.seller).to.eq('bob');",
									"});",
									"",
									"pm.collectionVariables.set(\"createdItemId\", jsonData.id);",
									"pm.collectionVariables.set(\"createdItemMileage\", jsonData.mileage);",
									"pm.collectionVariables.set(\"createdItemModel\", jsonData.model);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"var date = new Date(new Date().getTime() + 20000);",
									"var dateString = date.toISOString();",
									"pm.variables.set(\"dateString\", dateString);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BobToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"make\": \"Ford\",\n  \"model\": \"{{$randomFirstName}}\",\n  \"color\": \"White\",\n  \"year\": \"2021\",\n  \"mileage\": \"10000\",\n  \"imageUrl\": \"https://cdn.pixabay.com/photo/2018/02/04/15/45/car-3130111_960_720.jpg\",\n  \"reservePrice\": 10,\n  \"auctionEnd\": \"{{dateString}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{gateway}}/auctions",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"auctions"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Created Auction with finished filter",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{gateway}}/search?pageSize=100&searchTerm={{createdItemModel}}&filterBy=finished",
							"host": [
								"{{gateway}}"
							],
							"path": [
								"search"
							],
							"query": [
								{
									"key": "pageSize",
									"value": "100"
								},
								{
									"key": "searchTerm",
									"value": "{{createdItemModel}}"
								},
								{
									"key": "filterBy",
									"value": "finished"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Bid on Seeded Auction (test grpc)",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{AliceToken}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{bidSvc}}/api/bids?auctionId=6a5011a1-fe1f-47df-9a32-b5346b289391&amount=100",
							"host": [
								"{{bidSvc}}"
							],
							"path": [
								"api",
								"bids"
							],
							"query": [
								{
									"key": "auctionId",
									"value": "6a5011a1-fe1f-47df-9a32-b5346b289391"
								},
								{
									"key": "amount",
									"value": "100"
								}
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "auctionApi",
			"value": "http://localhost:7001",
			"type": "string"
		},
		{
			"key": "searchApi",
			"value": "http://localhost:7002",
			"type": "string"
		},
		{
			"key": "bidSvc",
			"value": "http://localhost:7003",
			"type": "string"
		},
		{
			"key": "identitySvc",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "gateway",
			"value": "http://localhost:6001",
			"type": "string"
		},
		{
			"key": "BobToken",
			"value": ""
		},
		{
			"key": "AliceToken",
			"value": ""
		},
		{
			"key": "TomToken",
			"value": ""
		},
		{
			"key": "createdItemId",
			"value": ""
		},
		{
			"key": "createdItemModel",
			"value": ""
		},
		{
			"key": "createdItemMake",
			"value": ""
		},
		{
			"key": "createdItemMileage",
			"value": ""
		}
	]
}